.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.26)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Gentoo::Overlay 3"
.TH Gentoo::Overlay 3 "2013-03-13" "perl v5.17.9" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Gentoo::Overlay \- Tools for working with Gentoo Overlays
.SH "VERSION"
.IX Header "VERSION"
version 1.0.3
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  my $overlay = Gentoo::Overlay\->new( path => \*(Aq/usr/portage\*(Aq );
\&
\&  my $name       = $overlay\->name();
\&  my %categories = $overlay\->categories();
\&
\&  print "Overlay $name \*(Aqs categories:\en";
\&  for( sort keys %categories ){
\&    printf "%30s : %s", $_, $categories{$_};
\&  }
\&
\&  # Overlay gentoo \*(Aqs categories:
\&  #  .....
\&  #  dev\-lang      : /usr/portage/dev\-lang
\&  #  .....
.Ve
.PP
There will be more features eventually, this is just a first release.
.SH "METHODS"
.IX Header "METHODS"
.SS "default_path"
.IX Subsection "default_path"
Useful function to easily wrap the class-wide method with a per-object sugar.
.PP
.Vb 5
\&    $overlay\->default_path(\*(Aqprofiles\*(Aq);
\&    \->
\&    ::Overlay\->_default_paths\->{\*(Aqprofiles\*(Aq}\->($overlay);
\&    \->
\&    $overlay\->path\->subdir(\*(Aqprofiles\*(Aq)
\&
\&
\&    $overlay\->default_path(\*(Aqcategory\*(Aq,\*(Aqfoo\*(Aq);
\&    \->
\&    ::Overlay\->_default_path(\*(Aqcategory\*(Aq)\->( $overlay, \*(Aqfoo\*(Aq );
\&    \->
\&    $overlay\->path\->subdir(\*(Aqfoo\*(Aq)
\&
\&    $overlay\->default_path(\*(Aqrepo_name\*(Aq);
\&    \->
\&    ::Overlay\->_default_path(\*(Aqrepo_name\*(Aq)\->( $overlay );
\&    \->
\&    $overlay\->_profile_dir\->file(\*(Aqrepo_name\*(Aq)
.Ve
.PP
They're class wide functions, but they need individual instances to work.
.SS "iterate"
.IX Subsection "iterate"
.Vb 2
\&  $overlay\->iterate( $what, sub {
\&      my ( $context_information ) = shift;
\&
\&  } );
.Ve
.PP
The iterate method provides a handy way to do walking across the whole tree stopping at each of a given type.
.IP "\(bu" 4
\&\f(CW\*(C`$what = \*(Aqcategories\*(Aq\*(C'\fR
.Sp
.Vb 8
\&  $overlay\->iterate( categories => sub {
\&      my ( $self, $c ) = shift;
\&      # $c\->{category_name}  # String
\&      # $c\->{category}       # Category Object
\&      # $c\->{num_categories} # How many categories are there to iterate
\&      # $c\->{last_category}  # Index ID of the last category.
\&      # $c\->{category_num}   # Index ID of the current category.
\&  } );
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`$what = \*(Aqpackages\*(Aq\*(C'\fR
.Sp
.Vb 12
\&  $overlay\->iterate( packages => sub {
\&      my ( $self, $c ) = shift;
\&      # $c\->{category_name}  # String
\&      # $c\->{category}       # Category Object
\&      # $c\->{num_categories} # How many categories are there to iterate
\&      # $c\->{last_category}  # Index ID of the last category.
\&      # $c\->{category_num}   # Index ID of the current category.
\&      #
\&      # $c\->{package_name}   # String
\&      # See ::Category for the rest of the fields provided by the package Iterator.
\&      # Very similar though.
\&  } );
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`$what = \*(Aqebuilds\*(Aq\*(C'\fR
.Sp
.Vb 10
\&  $overlay\->iterate( ebuilds => sub {
\&      my ( $self, $c ) = shift;
\&      # $c\->{category_name}  # String
\&      # $c\->{category}       # Category Object
\&      # $c\->{num_categories} # How many categories are there to iterate
\&      # $c\->{last_category}  # Index ID of the last category.
\&      # $c\->{category_num}   # Index ID of the current category.
\&      #
\&      # $c\->{package_name}   # String
\&      # See ::Category for the rest of the fields provided by the package Iterator.
\&      # Very similar though.
\&      #
\&      # $c\->{ebuild_name}   # String
\&      # See ::Package for the rest of the fields provided by the ebuild Iterator.
\&      # Very similar though.
\&  } );
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "path"
.IX Subsection "path"
Path to repository.
.PP
.Vb 1
\&    isa => Dir, ro, required, coerce
.Ve
.PP
\&\*(L"Dir\*(R" in MooseX::Types::Path::Tiny
.SS "name"
.IX Subsection "name"
Repository name.
.PP
.Vb 1
\&    isa => Gentoo_\|_Overlay_RepositoryName, ro, lazy_build
.Ve
.PP
\&\f(CW\*(C`RepositoryName\*(C'\fR
.PP
\&\*(L"_build_name\*(R"
.SH "ATTRIBUTE ACCESSORS"
.IX Header "ATTRIBUTE ACCESSORS"
.SS "category_names"
.IX Subsection "category_names"
Returns a list of the names of all the categories.
.PP
.Vb 1
\&    my @list = sort $overlay\->category_names();
.Ve
.PP
\&\*(L"_categories\*(R"
.SS "categories"
.IX Subsection "categories"
Returns a hash of \f(CW\*(C`Category\*(C'\fR objects.
.PP
.Vb 2
\&    my %hash = $overlay\->categories;
\&    print $hash{dev\-perl}\->pretty_name; # dev\-perl/::gentoo
.Ve
.PP
\&\*(L"_categories\*(R"
.SS "get_category"
.IX Subsection "get_category"
Returns a Category Object for a given category name
.PP
.Vb 1
\&    my $cat = $overlay\->get_category(\*(Aqdev\-perl\*(Aq);
.Ve
.PP
\&\*(L"_categories\*(R"
.SH "PRIVATE ATTRIBUTES"
.IX Header "PRIVATE ATTRIBUTES"
.SS "_profile_dir"
.IX Subsection "_profile_dir"
Path to the profile sub-directory.
.PP
.Vb 1
\&    isa => Dir, ro, lazy_build
.Ve
.PP
\&\*(L"Dir\*(R" in MooseX::Types::Path::Tiny
.PP
\&\*(L"_build_\|_profile_dir\*(R"
.SS "_categories"
.IX Subsection "_categories"
The auto-generating category hash backing
.PP
.Vb 1
\&    isa => HashRef[ Gentoo_\|_Overlay_Category ], ro, lazy_build
.Ve
.PP
\&\*(L"_build_\|_categories\*(R"
.PP
\&\*(L"_has_category\*(R"
.PP
\&\*(L"category_names\*(R"
.PP
\&\*(L"categories\*(R"
.PP
\&\*(L"get_category\*(R"
.PP
\&\*(L"Gentoo_\|_Overlay_Category\*(R" in Gentoo::Overlay::Types
.PP
\&\f(CW\*(C`MooseX::Types::Moose\*(C'\fR
.SH "PRIVATE ATTRIBUTE ACCESSORS"
.IX Header "PRIVATE ATTRIBUTE ACCESSORS"
.SS "_has_category"
.IX Subsection "_has_category"
Returns if a named category exists
.PP
.Vb 1
\&    $overlay\->_has_category("dev\-perl");
.Ve
.PP
\&\*(L"_categories\*(R"
.SH "PRIVATE CLASS ATTRIBUTES"
.IX Header "PRIVATE CLASS ATTRIBUTES"
.SS "_default_paths"
.IX Subsection "_default_paths"
Class-wide list of path generators.
.PP
.Vb 1
\&    isa => HashRef[ CodeRef ], ro, lazy_build
.Ve
.PP
\&\*(L"_build_\|_default_paths\*(R"
.SH "PRIVATE METHODS"
.IX Header "PRIVATE METHODS"
.SS "_build_name"
.IX Subsection "_build_name"
Extracts the repository name out of the file '\f(CW\*(C`repo_name\*(C'\fR'
in \f(CW\*(C`$OVERLAY/profiles/repo_name\*(C'\fR
.PP
.Vb 1
\&    $overlay\->_build_name
.Ve
.PP
\&\*(L"name\*(R"
.SS "_build_\|_profile_dir"
.IX Subsection "_build__profile_dir"
Verifies the existence of the profile directory, and returns the path to it.
.PP
.Vb 1
\&    $overlay\->_build_\|_profile_dir
.Ve
.PP
\&\*(L"_profile_dir\*(R"
.SS "_build_\|_categories"
.IX Subsection "_build__categories"
Generates the Category Hash-Table, either by reading the categories index ( new, preferred )
or by traversing the directory ( old, discouraged )
.PP
.Vb 1
\&    $category\->_build_categories;
.Ve
.PP
\&\*(L"_categories\*(R"
.PP
\&\*(L"_build_\|_\|_categories_scan\*(R"
.PP
\&\*(L"_build_\|_\|_categories_file\*(R"
.SS "_build_\|_\|_categories_file"
.IX Subsection "_build___categories_file"
Builds the category map using the 'categories' file found in the overlays profile directory.
.PP
.Vb 1
\&    $overlay\->_build_\|_\|_categories_file
.Ve
.SS "_build_\|_\|_categories_scan"
.IX Subsection "_build___categories_scan"
Builds the category map the hard way by scanning the directory and then skipping things
that are files and/or blacklisted.
.PP
.Vb 1
\&    $overlay\->_build_\|_\|_categories_scan
.Ve
.SS "_iterate_ebuilds"
.IX Subsection "_iterate_ebuilds"
.Vb 1
\&  $object\->_iterate_ebuilds( ignored_value => sub {  } );
.Ve
.PP
Handles dispatch call for
.PP
.Vb 1
\&  $object\->iterate( ebuilds => sub { } );
.Ve
.SS "_iterate_categories"
.IX Subsection "_iterate_categories"
.Vb 1
\&  $object\->_iterate_categories( ignored_value => sub {  } );
.Ve
.PP
Handles dispatch call for
.PP
.Vb 1
\&  $object\->iterate( categories => sub { } );
.Ve
.SS "_iterate_packages"
.IX Subsection "_iterate_packages"
.Vb 1
\&  $object\->_iterate_packages( ignored_value => sub {  } );
.Ve
.PP
Handles dispatch call for
.PP
.Vb 1
\&  $object\->iterate( packages => sub { } );
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Kent Fredric <kentnl@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 by Kent Fredric <kentnl@cpan.org>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
