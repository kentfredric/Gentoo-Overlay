.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.26)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Gentoo::Overlay::Category 3"
.TH Gentoo::Overlay::Category 3 "2013-03-13" "perl v5.17.9" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Gentoo::Overlay::Category \- A singular category in a repository;
.SH "VERSION"
.IX Header "VERSION"
version 1.0.3
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Still limited functionality, more to come.
.PP
.Vb 4
\&    my $category = ::Overlay::Category\->new(
\&        name => \*(Aqdev\-perl\*(Aq,
\&        overlay => \*(Aq/usr/portage\*(Aq ,
\&    );
\&
\&    my $category = ::Overlay::Category\->new(
\&        name => \*(Aqdev\-perl\*(Aq,
\&        overlay => $overlay_object ,
\&    );
\&
\&    $category\->exists()  # is the category there, is it a directory?
\&
\&    $category\->pretty_name()  #  dev\-perl/::gentoo
\&
\&    $category\->path()  # /usr/portage/dev\-perl
\&
\&    ::Overlay::Category\->is_blacklisted(\*(Aq..\*(Aq) # is \*(Aq..\*(Aq a blacklisted category
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "exists"
.IX Subsection "exists"
Does the category exist, and is it a directory?
.PP
.Vb 1
\&    $category\->exists();
.Ve
.SS "is_blacklisted"
.IX Subsection "is_blacklisted"
Does the category name appear on a blacklist meaning auto-scan should ignore this?
.PP
.Vb 1
\&    ::Category\->is_blacklisted(\*(Aq..\*(Aq) # true
\&
\&    ::Category\->is_blacklisted(\*(Aqmetadata\*(Aq) # true
.Ve
.SS "pretty_name"
.IX Subsection "pretty_name"
A pretty form of the name.
.PP
.Vb 1
\&    $category\->pretty_name  # dev\-perl/::gentoo
.Ve
.SS "iterate"
.IX Subsection "iterate"
.Vb 2
\&  $overlay\->iterate( $what, sub {
\&      my ( $context_information ) = shift;
\&
\&  } );
.Ve
.PP
The iterate method provides a handy way to do walking across the whole tree stopping at each of a given type.
.IP "\(bu" 4
\&\f(CW\*(C`$what = \*(Aqpackages\*(Aq\*(C'\fR
.Sp
.Vb 8
\&  $overlay\->iterate( packages => sub {
\&      my ( $self, $c ) = shift;
\&      # $c\->{package_name}  # String
\&      # $c\->{package}       # Package Object
\&      # $c\->{num_packages}  # How many packages are there to iterate
\&      # $c\->{last_package}  # Index ID of the last package.
\&      # $c\->{package_num}   # Index ID of the current package.
\&  } );
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`$what = \*(Aqebuilds\*(Aq\*(C'\fR
.Sp
.Vb 7
\&  $overlay\->iterate( ebuilds => sub {
\&      my ( $self, $c ) = shift;
\&      # $c\->{package_name}  # String
\&      # $c\->{package}       # Package Object
\&      # $c\->{num_packages}  # How many packages are there to iterate
\&      # $c\->{last_package}  # Index ID of the last package.
\&      # $c\->{package_num}   # Index ID of the current package.
\&
\&      # $c\->{ebuild_name}   # String
\&      # See ::Ebuild for the rest of the fields provided by the ebuild Iterator.
\&      # Very similar though.
\&  } );
.Ve
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "name"
.IX Subsection "name"
The classes short name
.PP
.Vb 1
\&    isa => Gentoo_\|_Overlay_CategoryName, required, ro
.Ve
.PP
\&\f(CW\*(C`CategoryName\*(C'\fR
.SS "overlay"
.IX Subsection "overlay"
The overlay it is in.
.PP
.Vb 1
\&    isa => Gentoo_\|_Overlay_Overlay, required, coerce
.Ve
.PP
\&\*(L"Gentoo_\|_Overlay_Overlay\*(R" in Gentoo::Overlay::Types
.SS "path"
.IX Subsection "path"
The full path to the category
.PP
.Vb 1
\&    isa => Dir, lazy, ro
.Ve
.PP
\&\*(L"Dir\*(R" in MooseX::Types::Path::Tiny
.SH "ATTRIBUTE ACCESSORS"
.IX Header "ATTRIBUTE ACCESSORS"
.SS "package_names"
.IX Subsection "package_names"
.Vb 3
\&    for( $category\->package_names ){
\&        print $_;
\&    }
.Ve
.PP
\&\*(L"_packages\*(R"
.SS "packages"
.IX Subsection "packages"
.Vb 1
\&    my %packages = $category\->packages;
.Ve
.PP
\&\*(L"_packages\*(R"
.SS "get_package"
.IX Subsection "get_package"
.Vb 1
\&    my $package = $category\->get_package(\*(AqMoose\*(Aq);
.Ve
.PP
\&\*(L"_packages\*(R"
.SH "PRIVATE ATTRIBUTES"
.IX Header "PRIVATE ATTRIBUTES"
.SS "_packages"
.IX Subsection "_packages"
.Vb 1
\&    isa => HashRef[ Gentoo_\|_Overlay_Package ], lazy_build, ro
\&
\&    accessors => _has_package , package_names,
\&                 packages, get_package
.Ve
.PP
\&\*(L"_has_package\*(R"
.PP
\&\*(L"package_names\*(R"
.PP
\&\*(L"packages\*(R"
.PP
\&\*(L"get_package\*(R"
.SH "PRIVATE ATTRIBUTE ACCESSORS"
.IX Header "PRIVATE ATTRIBUTE ACCESSORS"
.SS "_has_package"
.IX Subsection "_has_package"
.Vb 1
\&    $category\->_has_package(\*(AqMoose\*(Aq);
.Ve
.PP
\&\*(L"_packages\*(R"
.SH "PRIVATE CLASS ATTRIBUTES"
.IX Header "PRIVATE CLASS ATTRIBUTES"
.SS "_scan_blacklist"
.IX Subsection "_scan_blacklist"
Class-Wide list of blacklisted directory names.
.PP
.Vb 1
\&    isa => HashRef[ Str ], ro, lazy
\&
\&    accessors => _scan_blacklisted
.Ve
.PP
\&\*(L"_scan_blacklisted\*(R"
.PP
\&\f(CW\*(C`MooseX::Types::Moose\*(C'\fR
.SH "PRIVATE CLASS ATTRIBUTE ACCESSORS"
.IX Header "PRIVATE CLASS ATTRIBUTE ACCESSORS"
.SS "_scan_blacklisted"
.IX Subsection "_scan_blacklisted"
is \f(CW$arg\fR blacklisted in the Class Wide Blacklist?
.PP
.Vb 3
\&    ::Category\->_scan_blacklisted( $arg )
\&       \->
\&    exists ::Category\->_scan_blacklist\->{$arg}
.Ve
.PP
\&\*(L"_scan_blacklist\*(R"
.SH "PRIVATE METHODS"
.IX Header "PRIVATE METHODS"
.SS "_build_\|_packages"
.IX Subsection "_build__packages"
Generates the package Hash-Table, by scanning the category directory.
.PP
\&\*(L"_packages\*(R"
.SS "_iterate_packages"
.IX Subsection "_iterate_packages"
.Vb 1
\&  $object\->_iterate_packages( ignored_value => sub {  } );
.Ve
.PP
Handles dispatch call for
.PP
.Vb 1
\&  $object\->iterate( packages => sub { } );
.Ve
.SS "_iterate_ebuilds"
.IX Subsection "_iterate_ebuilds"
.Vb 1
\&  $object\->_iterate_ebuilds( ignored_value => sub {  } );
.Ve
.PP
Handles dispatch call for
.PP
.Vb 1
\&  $object\->iterate( ebuilds => sub { } );
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Kent Fredric <kentnl@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 by Kent Fredric <kentnl@cpan.org>.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
